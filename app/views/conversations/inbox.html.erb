<%= render 'shared/navbar' %>

<%= render 'layouts/flash' %>

<div class="container conversation-list">
</div>

<script type="text/jsx">
/** @jsx React.DOM */

var Avatar = React.createClass({
  render: function() {
    avatarInitialsStyle = { width: 30, height: 30, lineHeight: '30px', display: 'none' };

    return (
      <div className="avatar avatar-default">
        <div className="avatar-initials" style={avatarInitialsStyle}>{this.props.initials}</div>
        <img src={this.props.gravatarUrl} width="30" height="30" onError={this.toggleAvatar} />
      </div>
    );
  },

  toggleAvatar: function(event) {
    var $img = $(event.target);
    $img.hide();
    $img.siblings().show();
  }
});

var MessageCount = React.createClass({
  render: function() {
    return (
      <span className="badge badge-message-count">
        <span className="glyphicon glyphicon-envelope"></span>
        {this.props.count} 
      </span>
    );
  }
});

var Timestamp = React.createClass({
  render: function() {
    // TODO: Remove stale badge if not stale
    var timestampClassNames = ['timestamp', 'badge', 'badge-timestamp-stale'].join(' ');
    var lastActivityAtInWords = this.timeAgoInWords(this.props.lastActivityAt);

    return (
      <span className={timestampClassNames}>
        {lastActivityAtInWords}
      </span>
    );
  },

  // TODO: Use moment.js to generate real time
  timeAgoInWords: function(datetime) {
    return '5 minutes ago';
  }
});

var ParticipantList = React.createClass({
  render: function() {
    var renderParticipant = function(participant) {
      return (
        <li key={participant.id}>
          {participant.nickname}
        </li>
      );
    };

    return (
      <ul className="participants">
        {this.props.participants.map(renderParticipant)}
      </ul>
    );
  }
});

var TagList = React.createClass({
  render: function() {
    var renderTagLabel = function(tag) {
      return (
        <span className="tag-label" key={tag}>
          #{tag}
        </span>
      )
    }

    return (
      <div className="tag-label-list">
        {this.props.tags.map(renderTagLabel)}
      </div>
    );
  }
});

var ConversationList = React.createClass({
  getInitialState: function() {
    return {
      conversations: []
    };
  },

  componentDidMount: function() {
    $.get(this.props.source, function(response) {
      this.setState({
        conversations: response['conversations']
      });
    }.bind(this));
  },

  render: function() {
    var renderConversation = function(conversation) {
      return (
        <div className="list-item" key={conversation.id}>
          <a href={conversation.url} className="conversation conversation-row">
            <div className="summary">
              <Avatar initials={conversation.creator_person.initials} gravatarUrl={conversation.creator_person.gravatar_url} />

              <div className="detail">
                <MessageCount count={conversation.message_count} />
                <Timestamp />

                <ParticipantList participants={conversation.participants} />

                <div className="number">
                  #{conversation.number}
                </div>
              </div>

              <div className="title">
                {conversation.summary}
              </div>

              <TagList tags={conversation.tags} />
            </div>
          </a>
        </div>
      );
    };

    return (
      <div className="list list-conversations">
        {this.state.conversations.map(renderConversation)}
      </div>
    );
  }
});

React.renderComponent(<ConversationList source="<%= inbox_account_conversations_path(@account, format: 'json') %>" />, $('.conversation-list')[0]);
</script>
